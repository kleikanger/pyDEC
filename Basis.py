'''
@file Contains a class that handles the basis.
@brief Read basis file, store basis info and generate basis input to CP2K or
DALTON. Basis sets are stored as BasisSet objects in the list Basis.basis_sets.
@date 2014
@author Karl R. Leikanger.
'''
from BasisSet import BasisSet


class Basis():
    '''
    @brief Container class for different basis sets.
    @var basis_name Name of basis.
    @date 2014
    @author Karl R. Leikanger.
    '''
    basis_sets = ''

    def __init__(self):
        '''
        @brief
        @var basis_sets List of BasisSet objects.
        @date 2014
        @author Karl R. Leikanger.
        '''
        self.basis_sets = []

    def read_basis_set(self, basis_name, infile_name, basis_format):
        '''
        @brief Read basis set from file, and append to self.basis_sets.
        @param basis_name Name of basis.
        @param infile_name Name of infile.
        @param infile_format Format inputfile 'DALTON', 'CP2K'.
        @date 2014
        @author Karl R. Leikanger.
        '''
        basis_set = BasisSet(basis_name)
        basis_set.read_basisfile(infile_name, basis_format)
        self.basis_sets.append(basis_set)

    def print_basis_sets(self, file_name, file_format):
        '''
        @brief Write all basis sets to file.
        @param file_name Filename.
        @param file_name Format output file 'DALTON', 'CP2K'.
        @date 2014
        @author Karl R. Leikanger.
        '''
        print('Writing basis sets to file <%s> in <%s> format.'
              % (file_name, file_format))
        f = open(file_name, 'w')

        # comment in different input formats
        options = {
            'dalton': '$',
            'lsdalton': '$',
            'cp2k': '#',
        }

        c = options[file_format.lower()]
        f.write('%s\n%s %s input file.\n%s ' % (c, c, file_format, c))
        f.write('This file is automatically generated by PROGNAME.\n')

        for basis_set in self.basis_sets:
            basis_set.print_basisfile(file_format, f)
            print('Basis set <%s> written to file.' % basis_set.basis_name)

        f.close()

    def get_mo_transformation(self, codeformat_from, codeformat_to, atoms):

        '''
        @brief Set up the transformation of MO's from codeformat_to to\
            codeformat_from.
        The permutation of the mo's is then simple:
            - mo = [mo[i] for i in permutations]
        @return The output is a list with permutations.
        @param codeformat_from String object: ('LSDALTON', 'CP2K', ...)
        @param codeformat_to String object: ('LSDALTON', 'CP2K', ...)
        @param atoms Elements from inputfile type System.__Atom
        @date 2014
        @author Karl R. Leikanger.
        '''
        options = {
            'dalton': self.__get_aoorder_dalton,
            'lsdalton': self.__get_aoorder_dalton,
            'cp2k': self.__get_aoorder_cp2k
        }
        try:
            perm_from = options[codeformat_from.lower()](atoms)
            perm_to = options[codeformat_to.lower()](atoms)
        except:
            print('Error in get_mo_transformation: '
                  + 'codeformat <%s> or <%s> not supported?'
                  % (codeformat_to, codeformat_from))
            raise

        # duplicate elements or different length of perm_to and perm_from?
        lens = [len(set(perm_to)), len(perm_to),
                len(set(perm_from)), len(perm_from)]

        if min(lens) != max(lens):
            print('Error in set_up_ao_order: Something wrong with the '
                  + 'permutation arrays')
            raise SystemExit

        # get permutations from codeformat_from -> codeformat_to format
        permutations = []
        for x in perm_to:
            permutations.append(perm_from.index(x))
        return permutations

    def __get_aoorder_dalton(self, atoms):
        '''
        @brief Get permutations from CODENAME format to DALTON format.
        @return The list of permutations.
        @param atoms Elements from inputfile type System.__Atom
        @date 2014
        @author Karl R. Leikanger.

        SEE: Lsdalton manual for explanation.
        '''
        permutations = []
        pmax = 0
        for a in atoms:
            # get permutations for atom and add to the list of permutations
            basis_set = self.get_basis_set(a.basisname)
            tmp = basis_set.get_ao_order('DALTON', a)
            permutations += [(x+pmax) for x in tmp]
            pmax += max(tmp)

        return permutations

    def __get_aoorder_cp2k(self, atoms):
        '''
        @brief Get permutations from CODENAME format to CP2K format.
        @return The list of permutations.
        @param atoms Elements from inputfile type System.__Atom
        @date 2014
        @author Karl R. Leikanger.
        '''
        permutations = []
        pmax = 0
        for a in atoms:
            # get permutations for atom and add to the list of permutations
            basis_set = self.get_basis_set(a.basisname)
            tmp = basis_set.get_ao_order('CP2K', a)
            permutations += [(x+pmax) for x in tmp]
            pmax += max(tmp)

        return permutations

    def get_basis_set(self, basis_name):
        '''
        @brief Get basis object from basis name.
        @return Basis object.
        @param basis_name Name of the basis.
        @date 2014
        @author Karl R. Leikanger.
        '''
        for b in self.basis_sets:
            if b.basis_name == basis_name:
                return b
        print('Error Basis:get_basis_set: Basis %s not stored in Basis object.'
              % basis_name)
        raise SystemExit
'''
basis = Basis()
basis.read_basis_set('STO-6G', 'STO-6G', 'DALTON')
basis.read_basis_set('STO-3G', 'STO-3G', 'DALTON')
basis.print_basis_sets('cp2k_STO-6G__3', 'CP2K')
basis.print_basis_sets('dalton_STO-6G__3', 'DALTON')
# basis.__get_order_of_dalton_aos_tags(self, basis.chem_elems[0])
# print(len(basis.chem_elems))
# for e in basis.chem_elems[int(sys.argv[1])].ao:
#    print(e.l)
#    print(e.c)
#    print(e.e)
'''
